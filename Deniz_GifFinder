using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
namespace GifFinder
{
    public partial class GifFinder : Form
    {
        SearchForm sf;
        public GifFinder()
        {
            InitializeComponent();
            try
            {
                // Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.2; WOW64; Trident / 7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; wbx 1.0.0)
                Microsoft.Win32.RegistryKey key = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(
                    @"SOFTWARE\\WOW6432Node\\Microsoft\\Internet Explorer\\MAIN\\FeatureControl\\FEATURE_BROWSER_EMULATION",
                    true);
                key.SetValue(Application.ExecutablePath.Replace(Application.StartupPath + "\\", ""), 11001, Microsoft.Win32.RegistryValueKind.DWord);
                key.Close();
            }
            catch
            {

            }
            sf = new SearchForm();
            timer1.Interval = 100;
            timer1.Tick += new EventHandler(t1t);
            webBrowser1.ScriptErrorsSuppressed = true;
            webBrowser1.Navigate("https://people.rit.edu/dxsogm/gif-finder.html");
            this.tileToolStripMenuItem.Click += new EventHandler(ttsmiC);
            this.cascadeToolStripMenuItem.Click += new EventHandler(ctsmiC);
            this.exitToolStripMenuItem.Click += new EventHandler(xtsmiC);
            this.newSearchToolStripMenuItem.Click += new EventHandler(nstsmiC);
        }
        private void ttsmiC(object sender, EventArgs e)
        {//stands for tile tool strip menu item click
            this.LayoutMdi(MdiLayout.TileHorizontal);
        }
        private void ctsmiC(object sender, EventArgs e)
        {//stands for cascade tool strip menu item click
            this.LayoutMdi(MdiLayout.Cascade);
        }
        private void xtsmiC(object sender, EventArgs e)
        {//stands for exit tool strip menu item click
            Application.Exit();
        }
        private void nstsmiC(object sender, EventArgs e)
        {//stands for new search tool strip menu item click
            this.sf.ShowDialog();
            if(sf.res="OK")
            {
                HtmlElement htmEl;
                htmEl = webBrowser1.Document.GetElementById("searchterm");
                htmEl.SetAttribute("value", sf.sea);
                htmEl = webBrowser1.Document.GetElementById("limit");
                htmEl.SetAttribute("value", Convert.ToString(sf.max));
                webBrowser1.Document.InvokeScript("searchButtonClicked");
            }
        }
        private void t1t(object sender, EventArgs e)
        {
            timer1.Stop();
            HtmlElement htmEl = webBrowser1.Document.GetElementById("lastelement");
            if (htmEl != null)
            {
                HtmlElementCollection htmlec;
                htmlec = webBrowser1.Document.GetElementsByTagName("img");
                foreach (HtmlElement f in htmlec)
                {
                    ImageForm iF = new ImageForm(this, f.GetAttribute("src"), f.GetAttribute("title"));
                    iF.Show();
                }
                htmEl.OuterHtml = "";
            }
            else
            {
                timer1.Start();
            }
        }
    }
}
//end of 1, start of 2
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Runtime.Remoting.Messaging;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
namespace GifFinder
{
    public partial class SearchForm : Form
    {
        public string res;
        public string sea;
        public int max;
        public SearchForm()
        {
            InitializeComponent();
            this.maxItems.KeyPress += new KeyPressEventHandler(miKp);
            this.okButton.Click += new EventHandler(obC);
            this.cancelButton.Click += new EventHandler(cbC);
        }
        private void miKp(object sender, KeyPressEventArgs e)
        {
            e.Handled = true;
            if(Char.IsDigit(e.KeyChar)||e.KeyChar=='\b')
            {
                e.Handled = false;
            }
        }
        private void obC(object sender, EventArgs e)
        {
            this.res = "OK";
            this.sea =searchTerm.Text;
            max = Convert.ToInt32(maxItems.Text);
            this.Hide();
        }
        private void cbC(object sender, EventArgs e)
        {
            this.res = "Cancel";
            this.Hide();
        }
    }
}
//end of 2, start of 3
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.IO;
using System.Threading.Tasks;
using System.Windows.Forms;
namespace GifFinder
{
    public partial class ImageForm : Form
    {
        string title;
        public ImageForm(GifFinder parent, string url, string title)
        {
            InitializeComponent();
            this.Text = title;
            this.MdiParent = parent;
            parent.closeAllToolStripMenuItem.Click += new EventHandler(catsmiC);
            parent.saveToolStripMenuItem.Click += new EventHandler(stsmiC);
            this.FormClosing += new FormClosingEventHandler(ifFc);
            pictureBox1.ImageLocation = url;
        }
        private void ifFc(object sender, FormClosingEventArgs e)
        {//stands for image form form closing
            GifFinder parent = (GifFinder)this.MdiParent;
            parent.closeAllToolStripMenuItem.Click -= new EventHandler(catsmiC);
            parent.saveToolStripMenuItem.Click -= new EventHandler(stsmiC);
        }
        private void catsmiC(object sender, EventArgs e)
        {//stands for close all tool strip menu item click
            this.Close();
        }
        private void stsmiC(object sender, EventArgs e)
        {
            if(this!=this.MdiParent.ActiveMdiChild)
            {
                return;
            }
            saveFileDialog1.Filter= "Bmp(*.BMP)|*.BMP|Jpg(*.JPG)|*.JPG|Png(*.PNG)|*.PNG|Gif(*.GIF)|*.GIF";
            saveFileDialog1.FileName = this.title;
            if(saveFileDialog1.ShowDialog()==DialogResult.OK)
            {
                switch(Path.GetExtension(saveFileDialog1.FileName).ToUpper())
                {
                    case ".BMP":
                        pictureBox1.Image.Save(saveFileDialog1.FileName, System.Drawing.Imaging.ImageFormat.Bmp);
                        break;
                    case ".PNG":
                        pictureBox1.Image.Save(saveFileDialog1.FileName, System.Drawing.Imaging.ImageFormat.Png);
                        break;
                    case ".GIF":
                        pictureBox1.Image.Save(saveFileDialog1.FileName, System.Drawing.Imaging.ImageFormat.Gif);
                        break;
                    case ".JPG":
                    case ".JPEG":
                        pictureBox1.Image.Save(saveFileDialog1.FileName, System.Drawing.Imaging.ImageFormat.Jpeg);
                        break;
                }
            }
        }
    }
}//end of 3
