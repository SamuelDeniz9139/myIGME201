using System;
using System.Windows.Forms;
namespace Dyscord
{
    public partial class SettingsForm : Form
    {
        public int myPort;
        public SettingsForm(Form owner, int nPort)
        {
            InitializeComponent();
            this.Owner = owner;
            this.CenterToParent();
            this.myPort = nPort;
            this.portTextBox.Text = nPort.ToString();
            this.startButton.Click += new EventHandler(sbC);
            this.portTextBox.KeyPress += new KeyPressEventHandler(ptpKp);
        }
        private void sbC(object s, EventArgs e)
        {//stands for start button click
            this.myPort = Int32.Parse(this.portTextBox.Text);
            this.Close();
        }
        private void ptpKp(object s, KeyPressEventArgs e)
        {//stands for port text box key press
            if(Char.IsDigit(e.KeyChar)||e.KeyChar=='\b')
            {
                e.Handled = false;
            }
            else
            {
                e.Handled = true;
            }
        }
    }
}//end of Form1, Form2 begins below
using System;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Threading;
using System.Windows.Forms;
namespace Dyscord
{
    public delegate void UpdateConversationDelegate(string text);
    public partial class dyscordForm : Form
    {
        string targetUser="";
        string targetIp="";
        int targetPort;
        string myIp="";
        int myPort=2222;
        Thread thread;
        Socket listener;
        public dyscordForm()
        {
            InitializeComponent();
            this.Show();
            SettingsForm sf = new SettingsForm(this,myPort);
            sf.ShowDialog();
            this.myPort = sf.myPort;
            ThreadStart ts = new ThreadStart(Listen);
            thread = new Thread(ts);
            thread.Start();
            IPHostEntry iphe = Dns.GetHostEntry(Dns.GetHostName());
            foreach(IPAddress ipa in iphe.AddressList)
            {
                if(ipa.AddressFamily==AddressFamily.InterNetwork)
                {
                    this.myIp = ipa.ToString();
                    break;
                }
            }
            this.loginButton.Click += new EventHandler(lbC);
            this.usersButton.Click += new EventHandler(ubC);
            this.sendButton.Click += new EventHandler(sbC);
            this.exitButton.Click += new EventHandler(xbC);
            this.webBrowser1.DocumentCompleted += new WebBrowserDocumentCompletedEventHandler(wbDc);
        }
        private void wbDc(object s, WebBrowserDocumentCompletedEventArgs e)
        {
            HtmlElementCollection hec;
            hec = webBrowser1.Document.GetElementsByTagName("button");
            foreach(HtmlElement he in hec)
            {
                he.Click+=new HtmlElementEventHandler(heC);
            }
        }
        private void heC(object s, HtmlElementEventArgs e)
        {
            string title;
            string[] ipPort;
            HtmlElement he = (HtmlElement)s;
            title = he.GetAttribute("name");
            ipPort = title.Split(':');
            this.targetIp = ipPort[0];
            this.targetPort = Int32.Parse(ipPort[1]);
            this.targetUser = he.GetAttribute("name");
            this.conversationGroupBox.Text = "Conversing with " + targetUser;
            webBrowser1.Visible = false;
            webBrowser1.SendToBack();
        }
        private void lbC(object s, EventArgs e)
        {//short for login button click
            if(userTextBox.TextLength>0)
            {
                webBrowser1.Navigate("http://people.rit.edu/dxsigm/php/login.php?login="+userTextBox.Text+"&ip"+myIp+":"+myPort);
                webBrowser1.Visible = false;
                userTextBox.Enabled = false;
                loginButton.Enabled = false;
            }
        }
        private void ubC(object s, EventArgs e)
        {//short for users button click
            webBrowser1.Navigate("http://people.rit.edu/dxsigm/php/login.php?logins");
            webBrowser1.Visible = true;
            convTextBox.SendToBack();
        }
        private void sbC(object s, EventArgs e)
        {//short for send button click
            if(this.targetIp.Length>0)
            {
                IPAddress ipa=IPAddress.Parse(this.targetIp);
                IPEndPoint rep = new IPEndPoint(ipa, this.targetPort);
                Socket server = new Socket(AddressFamily.InterNetwork,SocketType.Stream,ProtocolType.Tcp);
                Stream ns = new NetworkStream(server);
                StreamWriter x = new StreamWriter(ns);
                string msg = userTextBox.Text + ":" + msgTextBox.Text + "\n";
                x.Write(msg.ToCharArray(), 0, msg.Length);
                x.Close();
                ns.Close();
                server.Close();
                this.convTextBox.Text += "> " + this.targetUser + ": " + msgTextBox.Text + "\n";
                msgTextBox.Clear();
            }
        }
        private void xbC(object s, EventArgs e)
        {//short for exit button click
            listener.Close();
            thread.Abort();
            Application.Exit();
        }
        public void Listen()
        {
            UpdateConversationDelegate ucd;
            ucd = new UpdateConversationDelegate(UpdateConversation);
            IPEndPoint se = new IPEndPoint(IPAddress.Any,this.myPort);
            this.listener=new Socket(AddressFamily.InterNetwork,SocketType.Stream,ProtocolType.Tcp);
            listener.Bind(se);
            listener.Listen(300);
            while(true)
            {
                Socket client = listener.Accept();
                Stream ns = new NetworkStream(client);
                StreamReader r = new StreamReader(ns);
                string result = r.ReadToEnd();
                Invoke(ucd,result);
                r.Close();
                ns.Close();
                client.Close();
            }
        }
        public void UpdateConversation(string text)
        {
            this.convTextBox.Text += text+"\n";
        }
    }
}//end of Form2
